name: Release

on: [workflow_dispatch]

jobs:
  build-wheels:
    name: Build Wheels for ${{matrix.platform_id}} on ${{matrix.os}}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        # manylinux (x86)
        - os: ubuntu-latest
          platform_id: manylinux_x86_64
        
        # MacOS x86_64
        - os: macos-13
          platform_id: macosx_x86_64

        # MacOS arm64
        - os: macos-14
          platform_id: macosx_arm64

    steps:
      - uses: "actions/checkout@v4"
        with:
          fetch-depth: 0
          submodules: "recursive"

      - name: Set up QEMU for Linux ARM builds
        if: ${{runner.os == 'Linux' && endsWith(matrix.platform_id, '_aarch64')}}
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set macOS Deployment Target
        if: ${{startsWith(matrix.os, 'macos')}}
        run: |
          if [[ "${{ matrix.os }}" == "macos-13" ]]; then
            echo "MACOSX_DEPLOYMENT_TARGET=13.0" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "macos-14" ]]; then
            echo "MACOSX_DEPLOYMENT_TARGET=14.0" >> $GITHUB_ENV
          fi
  
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.0
        env: # Can specify per os - e.g. CIBW_BEFORE_ALL_LINUX, CIBW_BEFORE_ALL_MACOS, CIBW_BEFORE_ALL_WINDOWS 
          CIBW_BEFORE_ALL_LINUX: ./build_tools/before_all_linux.sh
          CIBW_BEFORE_ALL_MACOS: ./build_tools/before_all_mac.sh
          CIBW_ARCHS_LINUX: ${{endsWith(matrix.platform_id, '_x86_64') && 'x86_64' || 'aarch64'}} 
          CIBW_BUILD: "*${{matrix.platform_id}}"
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest {package}/tests
          CIBW_SKIP: pp* # Disable building PyPy wheels on all platforms

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.platform_id }}
          path: ./wheelhouse/*.whl
  
  build-iqtree:
    name: Fetch or Build IQ-TREE 2 Static Library
    runs-on: ubuntu-latest
    steps:
      - uses: "actions/checkout@v4"
        with:
          fetch-depth: 0
          submodules: recursive

      - id: build
        uses: ./.github/actions/build-iqtree
        with:
          os: ubuntu-latest
    
    outputs:
      iqtree2-sha: ${{steps.build.outputs.iqtree2-sha}}
        
  build-docs:
    runs-on: ubuntu-latest
    needs: build-iqtree
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - uses: ./.github/actions/setup-piqtree
        with:
          python-version: "3.13"
          cache-key: libiqtree-ubuntu-latest-${{ needs.build-iqtree.outputs.iqtree2-sha }}
      
      - name: Install Docs Dependencies
        run: |
          pip install .[doc]

      - name: Build documentation
        run: |
          echo `pwd`
          mkdocs build
        working-directory: ${{ github.workspace }}

      - name: Upload documentation artifact
        uses: actions/upload-artifact@v4
        with:
          name: piqtree-docs-html
          path: site

  release-test:
    name: Release to Test PyPI
    needs: [build-wheels, build-docs]
    environment: release
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - name: Publish package distributions to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
  
  release:
    name: Release to PyPI
    needs: release-test
    environment: release
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1