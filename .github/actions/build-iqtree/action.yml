name: Fetch or Build IQ-TREE 2 Static Library
description: "Checks if the IQ-TREE 2 static library exists, if not then building it."
inputs:
  os:
    description: "Runner OS Name."
    required: true
outputs:
  iqtree2-sha:
    description: "SHA for commit of IQ-TREE 2 static library."
    value: ${{ steps.iqtree2-sha.outputs.iqtree2-sha }}
runs:
  using: "composite"
  steps:
    - id: iqtree2-sha
      name: Get IQ-TREE 2 SHA
      shell: bash
      run: |
        cd iqtree2
        IQ_TREE_2_SHA=$(git rev-parse HEAD)
        echo "iqtree2-sha=${IQ_TREE_2_SHA}" >> "$GITHUB_OUTPUT"

    - uses: actions/cache@v4
      id: cache
      with:
        key: libiqtree-${{ inputs.os }}-${{ steps.iqtree2-sha.outputs.iqtree2-sha }}
        path: |
          ${{ inputs.os == 'windows-latest' && 'src/piqtree/_libiqtree/iqtree2.lib\nsrc/piqtree/_libiqtree/iqtree2.dll' || 'src/piqtree/_libiqtree/libiqtree2.a' }}
        lookup-only: true

    - name: Install Boost
      if: runner.os == 'Windows' && steps.cache.outputs.cache-hit != 'true'
      uses: MarkusJx/install-boost@v2.4.5
      id: install-boost
      with:
        boost_version: 1.84.0
        platform_version: 2022
        toolset: mingw

    - name: Set Boost Environment Variables
      if: runner.os == 'Windows' && steps.cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "Boost_INCLUDE_DIR=${{ steps.install-boost.outputs.BOOST_ROOT }}/include" >> "$GITHUB_ENV"
        echo "Boost_LIBRARY_DIRS=${{ steps.install-boost.outputs.BOOST_ROOT }}/lib" >> "$GITHUB_ENV"
    
    - name: Debug Boost Variables
      if: runner.os == 'Windows'
      shell: bash
      run: |
        echo "BOOST_ROOT=$BOOST_ROOT"
        echo "Boost_INCLUDE_DIR=$Boost_INCLUDE_DIR"
        echo "Boost_LIBRARY_DIRS=$Boost_LIBRARY_DIRS"
        echo "CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH"

    - name: Build IQ-TREE
      shell: bash
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        if [[ "${{ inputs.os }}" == "ubuntu-latest" ]]; then
          sudo ./build_tools/before_all_linux.sh
        elif [[ "${{ inputs.os }}" == "macOS-latest" ]]; then
          ./build_tools/before_all_mac.sh
        elif [[ "${{ inputs.os }}" == "windows-latest" ]]; then
          ./build_tools/before_all_windows.sh
        else
          echo "Unrecognized OS: '${{ inputs.os }}'."
          exit 1
        fi